package ds;

import java.util.*;

public class LinkedList<X>{
     
    private Node first;
    private Node last;
    private int nodeCount;
    
    public LinkedList(){
        first=null;
        last=null;
        nodeCount=0;
    }
    public int size(){
        return nodeCount;
    }
    
    public void add(X item){
        if(first==null){
         first=new Node(item);
         last=first;
         }
      else{
          Node lastNewNode=new Node(item);
          last.setNextNode(lastNewNode);
          last=lastNewNode;
      }  
      nodeCount++;
    }
    
    public void insert(X item ,int position){
        
        if(size() < position){
            throw new IllegalStateException("there is no space in list");
        }
        Node currentNode = first;
        for(int i=0 ; i< position && currentNode!=null;i++){
            currentNode=currentNode.getNextNode();
        }
        Node newNode = new Node(item);
        Node nextNode = currentNode.getNextNode();
        currentNode.setNextNode(newNode);
        newNode.setNextNode(nextNode);
        nodeCount++;
    }
    
    public X removeAt(int position){
        if(first==null){
            throw new IllegalStateException("list is empty");
        }
        Node currentNode=first;
        Node prevNode=first;
        
        for(int i=1;i<=position && currentNode!=null;i++){
            prevNode=currentNode;
            currentNode=currentNode.getNextNode();
        }
        X nodeItem=currentNode.getNodeItem();
        prevNode.setNextNode(currentNode.getNextNode());
        nodeCount--;
        return nodeItem;
    }
    
    public X get(int position){
        if(first==null){
            throw new IllegalStateException("the linked list is empty");
        }
        
        Node currentNode=first;
        for(int i=1 ; i< size() && currentNode!=null;i++){
            if(i==position){
                return currentNode.getNodeItem();
                
            }
            currentNode = currentNode.getNextNode();
        }
        return null;
    }
    
    public int find(X item){
        if(first==null){
            throw new IllegalStateException("linked list is empty");
        }
        Node currentNode = first;
        for(int i=1 ; i<size() && currentNode!=null;i++){
            if(currentNode.getNodeItem().equals(item)){
                return i;
            }
            currentNode = currentNode.getNextNode();
    } 
        return -1;
    }
    
    public X remove(){
        if(first==null){
            throw new IllegalStateException("no item is there in the list");
        }
        X nodeItem=first.getNodeItem();
        first=first.getNextNode();
        nodeCount--;
        return nodeItem;
    }
    
    
    private class Node {
        private X nodeItem;
        private Node nextNode;
        
    public Node(X item){
        this.nodeItem=item;
        this.nextNode=null;
    } 
    
    public void setNextNode(Node nextNode){
          this.nextNode=nextNode;
    }
    
    public Node getNextNode(){
        return nextNode;
    }
        public Node getNodeItem(){
        return nodeItem;
    }
  }
}



































