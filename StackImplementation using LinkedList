import java.io.*;
import java.util.*;

class Node{
   private int data;
   private Node link;
    
    public Node()
    {
        data=0;
        link=null;
    }
    public Node(int d,Node l){
        this.data=d;
        this.link=l;
    }
     public void setLink(Node l)
    {
        link = l;
    }    
     public void setData(int d)
    {
        data = d;
    }   
    public Node getLink()
    {
        return link;
    }    
     public int getData()
    {
        return data;
    }
}
class linkedStack{
    int size ;Node top;
    
    public linkedStack(){
        top=null;
        size=0;
    }
    public boolean isEmpty(){
        return top==null;
    }
    public int getSize(){
        return size;
    }
    public void push(int data){
        Node nptr=new Node(data,null);
        if (top==null)
        top=nptr;
        else
        {
            nptr.setLink(top);
            top=nptr;
        }
        size++;
    }
    public int pop(){
        if (isEmpty() )
        throw new NoSuchElementException("Underflow Exception");
        Node ptr =top;
        top= ptr.getLink();
        size--;
        return ptr.getData();
    }
    public int peek()
    {
        if (isEmpty() )
            throw new NoSuchElementException("Underflow Exception") ;
        return top.getData();
    }    
    public void display()
    {
        System.out.print("\nStack = ");
        if (size == 0) 
        {
            System.out.print("Empty\n");
            return ;
        }
        Node ptr = top;
        while (ptr != null)
        {
            System.out.print(ptr.getData()+" ");
            ptr = ptr.getLink();
        }
        System.out.println();        
    }
}
class stackImplementation{
    public static void main (String[] args){
        Scanner sc =new Scanner(System.in);
        linkedStack ls =new linkedStack();
        System.out.println("Linked stack test");
        char ch;
        do{
            System.out.println("LinkedList stack implementation");
            System.out.println("1.push");
            System.out.println("2.pop");
            System.out.println("3.peek");
            System.out.println("4.check Empty");
            System.out.println("5.size");
            int choice = sc.nextInt();
            switch (choice) 
            {
            case 1 :
                System.out.println("Enter integer element to push");
                ls.push( sc.nextInt() ); 
                break;                         
            case 2 : 
                try
                {
                    System.out.println("Popped Element = "+ ls.pop());
                }
                catch (Exception e)
                {
                    System.out.println("Error : " + e.getMessage());
                }    
                break;                         
            case 3 : 
                try
                {
                    System.out.println("Peek Element = "+ ls.peek());
                }
                catch (Exception e)
                {
                    System.out.println("Error : " + e.getMessage());
                }
                break;                         
            case 4 : 
                System.out.println("Empty status = "+ ls.isEmpty());
                break;                
            case 5 : 
                System.out.println("Size = "+ ls.getSize()); 
                break;                
            case 6 : 
                System.out.println("Stack = "); 
                ls.display();
                break;                        
            default : 
                System.out.println("Wrong Entry \n ");
                break;
            }
            ls.display();            
            System.out.println("\nDo you want to continue (Type y or n) \n");
            ch = sc.next().charAt(0);       
         } 
        while (ch == 'Y'|| ch == 'y');      
       }
      }
    


